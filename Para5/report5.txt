--------------------------

学籍番号 : 1613354
氏名 :  星野シンジ

--------------------------

回答1 :
1.1) 空欄に入る数は以下のとおり

A： 256^3 = 16777216

B: 4^3 = 64

C: 4^3 = 64

1.2)
並列化で問題となるStreamの処理の番号

  1番目のストリーム

1.3)単純に並列化したのでは結果が異なる原因

  RGBクラスのメソッドは同期が取られていない。
  ここで、１番目のストリームを並列処理すると
  同じRGBオブジェクトに対して同時にaddメソッドを呼び出してしまう可能性があり、
  RGBオブジェクトのメンバ変数に間違った値が入る恐れがある。
  従って、並列計算をしていない時と結果が異なる。

  (しかし、実際にはサンプル数が多く、それの平均を取っているので、
  いくつかの色のデータがおかしくなったぐらいでは、
  目にわかるほどの色のズレは現れないことが多い。)

1.4)並列化に対応するために行った変更点

  まず、２、３番目のストリームはそのままparallel()メソッドを
  用いて、並列化を行なった。
  次に、１番目のストリームをparallel()メソッドを用いて並列化を行うが、
  結果が変わることのないように、RGBクラスのadd()メソッドにsynchronized
  をつけることによって、同期を取り、並列計算をしても安全になるように変更した。

回答2 :
2.1)
出力される時間の意味

  100単位時間分の玉の運動の計算にかかった時間。

達成された高速化の数値的説明

  計測の結果得られたデータは次の通り

  PARAMETER=  SINGLE      PARALLEL
  test1       49716msec   30798msec
  test2       49563msec   31152msec
  test3       48375msec   30496msec

  このデータにより、玉の運動の計算速度が
  並列処理のより50%ほど速くなったことがわかる。

計測時間の信頼性を向上させるために行った工夫、計測で注意した点

  計測の結果が偶然現れた値でないことを
  保証するために並列計算をしているときとしていない時それぞれで
  複数回の計測を行い、交互に計測を行った。

  Main11が同時に起動している他のプログラムに計算資源を奪われないように
  実験を行う前に、ターミナル以外の全てのプログラムを閉じた。

2.2)
衝突判定部分の高速化についてのjvisualvmを使用した調査方法の説明

  まず、jvisualvmはサンプラでサンプリング開始ボタンを押さないとサンプリングが始まらないので、
  Main11のmainメソッドの頭にSleep(10000)を挿入。さらに、最後までサンプリングが正しくできるように
  start()メソッド内のSystem.exit(1)の前にSleep(5000)を挿入

  次に、Main11をSINGLEとPARALLELのパラメータを与えて、一つずつ実行する。
  それぞれを実行する際にSleep(10000)が終わらないように、できるだけ速く
  サンプル開始ボタンを押し、プログラムの最初から最後までサンプリングする。

  最後に、para.graphic.shape.CollisionCheckerParallel2.check()のセルフ・タイム
  を比較する。

  ここで、セルフ・タイムは実行するのにかかった時間で、セルフ・タイム(CPU)は
  実行していた時間のうち、実際にCPUを使用していた時間である。コードの一部分の
  実行時間が知りたいのでセルフ・タイム（CPU)を採用した。

調査により判明した衝突判定部分の高速化前後の処理速度の比率

  para.graphic.shape.CollisionCheckerParallel2.check()のセルフ・タイム(CPU)

  並列処理化前：38,970ms 38,022ms 39,432ms
  並列処理化後：10,872ms 9,503ms  10,405ms

  となり、並列化により処理時間が74.6%程度削減できていることがわかった。

2.3)
発見された改善対象のコード部分

  jvisualvmのサンプリングの結果を見ると、
  para.graphic.shape.ShapeManager.remove()
  もCPUをたくさん使っていることがわかったので、それらで改善できるところがないかを
  考えた。

  また、コードを読んだところ、スレッドの中にint型変数jについての
  無意味な計算が行われているのも発見した。

改良方針
  ShapeManagerクラスのremove()メソッドでのShapeを検索する処理を
  並列化する。

  int型変数jの宣言とその無意味な計算についての行を削除。

2.4)2.3で行った改良部分の改良前後の処理時間について

  まず、ShapeManagerクラスのremove()メソッドの並列化だけを行い、
  時間を比較してみた。全ての検査はPARAMETER=PARALLELで行った。

  回数    1        2        3        4        5
  改良前  10,851ms 10,367ms 9,940ms  11,712ms 9,243ms
  改良後  6,949ms  5,529ms  6,682ms  5,109ms  5,073ms

  次に、int型変数jの宣言とその無意味な計算についての行を削除し
  処理時間を調べたが、合計の計算時間に何の変化もなかった。
  最適化器によってそもそも消されているのではないかと予測された。

処理時間の定義

  ここでは、remove()メソッドの処理時間の短縮を図りたいので、
  para.graphic.shape.ShapeManager.remove()の
  セルフ・タイム(CPU)の時間を処理時間として考えた。

改良前と比べ改良後の処理時間は　56.4　％となった

回答3 :
3.1)ゲーム性を高めるための実装
得点ルールの定義

  ブロックをひとつ破壊すると、1点もらえ、コンボ数も1増える。
  また、ボーナス点として、コンボ数*0.06点もらえる。

  ボールを地面に落としてしまうと、コンボがリセットされる。

  つまり、できるだけボールを落とさずに長いコンボをすると
  点数が高くなるというゲームにした。

得点計算のコード部分について

  ボールがブロックに当たった時の呼び出されるhit()というメソッドを
  作り、そこで点数の計算を行なっている。
  また、点数及びコンボ数はGame03クラスのメンバ変数として定義している。

  ボールを落とした時やゲームが始まった時に呼び出されるreset()というメソッドを
  作り、それを呼び出すとコンボ数はリセットされる。

得点表示のためのコード部分について

  update_score()というメソッドを書き、その中にまとめてsm_scoreというShapeManagerに
  点数の数字をdraw()することをしている。ゲームのスレッドでマイサイクル呼び出せば、
  点数が表示される。

ゲームの終了条件の定義

  全てのブロックが破壊された時点で終了。このようにした理由としては、
  ボールの横軸の速さがゲームの仕様上変化しないので、ボールを落とした回数
  で終了してしまうと面白くないと思ったからである。
  ちなみに、reset()メソッドの中で、初期状態と戻すと同時に、横方向の速度も
  ランダムでセットされるようにしたので、ブロックが破壊できなくなったら、
  コンボを諦めてボールを落とせば良い。こうすれば、いずれ全てのブロックが破壊できる。

  また、ネット上での似たようなゲームを見て見ると、ボードの速度でボールの跳ね返る
  角度も変化するようにボールのバウンドが実装されていることでこれを解決しているようだ。

ゲームの終了判定のコード部分について

  Game03のメンバ変数で残りのブロックの数を数え、
  それが０になれば終了をする。

  終了条件の確認はcheck_end()メソッドで行われており、
  while文のマイサイクルで呼び出されている。

スタートボタンを押した際の新たな初期化処理について

  reset()メソッドに難易度を示すint型の引数をつけ、
  ボールの縦軸の初期速度をそれに基づいて速くなるようにした。

  reset()が呼ばれる時の引数の値は、gamestart()で与えられた引数の値、
  つまりspinnerで選択された数値である。

  また、ボールのパワーアップが作られる確率は、難易度が上がるほど小さくなる。

  ゲームオーバー後のゲームのリセットについては、gamestart()メソッドの最初でスレッドがnullかどうか
  で新しくゲームを始めるか始めないかを設定している。従って、ゲームが終了した時にthread = nullをすれば、
  ゲームオーバー後にゲームがリセットされるようになる。

ゲームの難易度の方針

  ボールの縦方向の速さとパワーアップの生成確率で難易度を調整することにした。

  ボールの縦方向の速さが大きくなると、ボールを逃しやすくなり、
  コンボが失われやすくなるので、結果としてスコアが取りづらくなる。

  ボールのパワーアップの数が少なくなることによって、
  簡単にコンボ数を稼ぐことが難しくなる。

数値選択とゲーム難易度についての実装部分について

  reset()メソッドの引数で難易度を設定できるようにし、gamestart()
  の引数を与えて呼び出すようにした。
  reset()メソッド内では、難易度が高いほどボールの縦方向の速さが大きく
  なるように設定した。

  パワーアップの生成については、ステージの初期化時に
  パワーアップの生成する確率を難易度に応じて小さくするようにした。

3.2)さらなるゲーム性を高めるための実装
実装方針

  3.2で先走って言及してしまったが、まずはパワーアップブロックを追加した。
  パワーアップブロックを破壊すると５秒間ボールがブロックに当たっても跳ね返らずに、
  そのまま破壊するようになる。

  ボードでボールを取り損ねて、地面に落としてしまうと、コンボ数がリセットされて
  ボールもリセットされるようにした。これにより、ボードが存在することに意味を与えた。

  ボールを連続で破壊するのが楽しくなるように、ブロックが破壊されると
  コンボ数が表示されるようにした。コンボ数を表す数字は、コンボ数が多ければ多いほど
  大きくなり、プレイヤーが楽しくなるように工夫をした。

実装箇所

  まず、パワーアップブロックの実装について説明する。
  ブロックの初期化の時に乱数生成器を用いていくつかのパワーアップブロックを生成する
  ようにし、パワーアップブロックは普通のブロックと別のShapeManagerに入れた。
  これは、当たり判定の処理の際に、パワーアップブロックを普通のブロックと別の扱いをするため
  である。

  パワーアップの仕組みとしては。
  当たり判定の処理で、パワーアップに衝突したら、boolenのpowerをtrueに変更する。
  さらに、パワーアップのタイマーとして、power_durationを設定する。
  powerがtrueの時はボールの描画hが変更され、色が変わるように実装した。
  while文の中で１サイクルにつきpower_durationがデクリメントされ、
  0以下になったのが確認されると、powerはfalseにリセットされる。
  また、当たり判定処理では、powerがtrueの時は、ブロックに衝突しても
  ブロックが消されるだけで、軌道は変化しないようにした。

  ボールを取り損ねて地面に落とした時のリセットについての実装について説明する。
  新たにShapeManagerを定義し、そこに地面の長方形をputsする。
  当たり判定の処理で、地面と衝突したのを確認するとreset()を呼び出すように
  設定した。

  最後に、コンボ表示の実装について説明する。
  hit()メソッド内でコンボ数の表示をするために、ボールの現在の座標に
  コンボ数を表すDigitをputsしている。
  また、reset()が呼ばれた時に、コンボ数を表すDigitをShapeManagerから
  remove()されるようにした。

今回の課題で特に学べたと感じたこと

  ストリームにすることによって並列処理をする方法が特に学べたと思う。
  もちろん、並列処理をしつつバグを作らない基礎というものが一番重要に感じた。
